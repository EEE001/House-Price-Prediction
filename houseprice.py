# -*- coding: utf-8 -*-
"""HousePrice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bfFmISl_aX-tHfvBP4Sf0ci7-RIrMGdl
"""

import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt
pd.options.mode.chained_assignment = None

from sklearn.preprocessing import LabelEncoder
from sklearn.feature_selection import mutual_info_classif
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder,StandardScaler
from sklearn.compose import make_column_transformer
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import LinearRegression,Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from imblearn.under_sampling import RandomUnderSampler,NearMiss
from imblearn.over_sampling import RandomOverSampler,SMOTE
from sklearn.preprocessing import MinMaxScaler

train_data= pd.read_csv(r"/content/drive/MyDrive/HousePrice  - Sheet1.csv")

train_data.head()

from google.colab import drive
drive.mount('/content/drive')

train_data.isna().sum()

train_data.dropna(inplace=True)

##train_data.replace({'Location':{'Gulshan':0,'Dhanmondi':1,'Hazaribag':2,'Keraniganj':3,'Lalmatia':4,'Banasree':5,'Adabor':6,'Bashbari':7,'Mohammadpur':8,'Farmgate':9,'Chaduddan':10,'Agargaon':11,'Savar':12,'Kalabagan':13,'Shymoli':14,'Banani':15,'Mohakhali':16,'Rampura':17,'Mirpur':18,'Uttara':19,'Kafrul':20,'Tejgaon':21,'Khilgaon':22}},inplace=True)

train_data.head()

dependent='Price'
independent=train_data.columns.tolist()
independent.remove(dependent)
X=train_data[independent].values
y=train_data[dependent].values
y=y.reshape(-1,1)

print(X)
print(y)

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=2)

print(X_train.shape)
print(X_test.shape)

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import r2_score,mean_absolute_error

from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor,ExtraTreesRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor

import math

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0])
],remainder='passthrough')

###LinearRegression

step2 = LinearRegression()

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))
print('MSE',metrics.mean_squared_error(y_test,y_pred))
print('RMSE',math.sqrt(metrics.mean_squared_error(y_test,y_pred)))

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0])
],remainder='passthrough')

###KNeighborsRegressor

step2 = KNeighborsRegressor(n_neighbors=3)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))
print('MSE',metrics.mean_squared_error(y_test,y_pred))
print('RMSE',math.sqrt(metrics.mean_squared_error(y_test,y_pred)))

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0])
],remainder='passthrough')

###DecisionTreeRegressor

step2 = DecisionTreeRegressor(max_depth=8)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))
print('MSE',metrics.mean_squared_error(y_test,y_pred))
print('RMSE',math.sqrt(metrics.mean_squared_error(y_test,y_pred)))

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0])
],remainder='passthrough')


####RandomForestRegressor

step2 = RandomForestRegressor(n_estimators=100,
                              random_state=3,
                              max_samples=0.5,
                              max_features=0.75,
                              max_depth=15)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))
print('MSE',metrics.mean_squared_error(y_test,y_pred))
print('RMSE',math.sqrt(metrics.mean_squared_error(y_test,y_pred)))

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0])
],remainder='passthrough')

###Lasso

step2 = Lasso(alpha=0.001)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))
print('MSE',metrics.mean_squared_error(y_test,y_pred))
print('RMSE',math.sqrt(metrics.mean_squared_error(y_test,y_pred)))